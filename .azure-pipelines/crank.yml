trigger:
  branches:
    include:
      - master
  paths:
    exclude:
      - docs/*
      - .github/*
pr:
  branches:
    include:
      - master
      - release/*
  paths:
    exclude:
      - docs/*
      - .github/*

schedules:
- cron: "0 4 * * *"
  displayName: Daily 4am (UTC) build
  branches:
    include:
    - master
    - /benchmarks/*
  always: true

variables:
  buildConfiguration: Release
  publishOutput: $(System.DefaultWorkingDirectory)/src/bin/managed-publish
  dotnetCoreSdk5Version: 5.0.103

jobs:


- job: windows_profiler
  pool:
    vmImage: windows-2019

  steps:

  - task: UseDotNet@2
    displayName: install dotnet core runtime 3.1
    inputs:
      packageType: runtime
      version: 3.1.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 5.0.103
    inputs:
      packageType: sdk
      version: 5.0.103

  - task: DotNetCoreCLI@2
    displayName: dotnet build
    inputs:
      command: build
      configuration: Release
      arguments: /nowarn:netsdk1138
      projects: |
        src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
        sample-libs/**/Samples.ExampleLibrary*.csproj

  - task: NuGetToolInstaller@1
    displayName: install nuget

  - task: NuGetCommand@2
    displayName: nuget restore
    inputs:
      restoreSolution: Datadog.Trace.Native.sln
      verbosityRestore: Normal

  - task: MSBuild@1
    displayName: msbuild
    inputs:
      solution: Datadog.Trace.proj
      platform: x64
      configuration: Release
      msbuildArguments: /t:BuildCpp
      maximumCpuCount: true

  - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/bin/Release/x64
    artifact: windows-native


- job: linux_profiler
  pool:
    vmImage: ubuntu-20.04
  steps:
  - task: UseDotNet@2
    displayName: install dotnet core runtime 3.1
    inputs:
      packageType: runtime
      version: 3.1.x

  - task: UseDotNet@2
    displayName: install dotnet core sdk 5
    inputs:
      packageType: sdk
      version: $(dotnetCoreSdk5Version)
      includePreviewVersions: true

  - task: DotNetCoreCLI@2
    displayName: dotnet build Datadog.Trace.ClrProfiler.Managed.Loader
    inputs:
      command: build
      projects: src/Datadog.Trace.ClrProfiler.Managed.Loader/Datadog.Trace.ClrProfiler.Managed.Loader.csproj
      arguments: --configuration $(buildConfiguration) /nowarn:netsdk1138

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed 2.0
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netstandard2.0 --output $(publishOutput)/netstandard2.0

  - task: DotNetCoreCLI@2
    displayName: dotnet publish Datadog.Trace.ClrProfiler.Managed 3.1
    inputs:
      command: publish
      publishWebProjects: false
      modifyOutputPath: false
      zipAfterPublish: false
      projects: src/Datadog.Trace.ClrProfiler.Managed/Datadog.Trace.ClrProfiler.Managed.csproj
      arguments: --configuration $(buildConfiguration) --framework netcoreapp3.1 --output $(publishOutput)/netcoreapp3.1

  - script: |
      sudo apt-get update
      sudo apt-get install -y git wget curl cmake make llvm clang gcc
    displayName: install_dependencies

  - script: |
      export CXX=clang++
      export CC=clang
      cd ./src/Datadog.Trace.ClrProfiler.Native
      mkdir -p build
      cd build
      cmake ../ -DCMAKE_BUILD_TYPE=Release
      make
    displayName: build_profiler

  - publish: $(System.DefaultWorkingDirectory)/src/Datadog.Trace.ClrProfiler.Native/build/bin
    artifact: linux-native


- job: crank
  pool: Throughput
  workspace:
    clean: all
  dependsOn:
  - linux_profiler
  - windows_profiler
  condition: succeeded()

  steps:
  - download: current
    artifact: linux-native

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/linux-native
      targetFolder: $(System.DefaultWorkingDirectory)/

  - download: current
    artifact: windows-native

  - task: CopyFiles@2
    inputs:
      sourceFolder: $(Pipeline.Workspace)/windows-native
      targetFolder: $(System.DefaultWorkingDirectory)/

  - script: |
      cd ./build/crank
      chmod +x ./run.sh
      ./run.sh
    env:
      DD_SERVICE: dd-trace-dotnet
